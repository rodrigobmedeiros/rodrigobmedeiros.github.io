<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Tech Blog - Rodrigo Bernardo</title><link href="/" rel="alternate"></link><link href="/feeds/all.atom.xml" rel="self"></link><id>/</id><updated>2021-04-27T16:00:00-03:00</updated><entry><title>Vocês precisam conhecer as namedtuples</title><link href="/voces-precisam-conhecer-as-namedtuples.html" rel="alternate"></link><published>2021-04-27T16:00:00-03:00</published><updated>2021-04-27T16:00:00-03:00</updated><author><name>Rodrigo B. Medeiros</name></author><id>tag:None,2021-04-27:/voces-precisam-conhecer-as-namedtuples.html</id><summary type="html">&lt;p&gt;&lt;img src="images/PythonNamedTuple.jpeg" alt="python code" width="800"/&gt;&lt;/p&gt;
&lt;h1&gt;&lt;strong&gt;Vocês precisam conhecer as namedtuples&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;Mesmo quem começou a desenvolver em python faz pouco tempo (me incluo nessa categoria), tem familiariade com algumas estruturas de dados que são muito presentes na linguagem, como as listas, os dicionários, os sets e as tuples. Diria que conhecendo bem essas estruturas, é possível …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img src="images/PythonNamedTuple.jpeg" alt="python code" width="800"/&gt;&lt;/p&gt;
&lt;h1&gt;&lt;strong&gt;Vocês precisam conhecer as namedtuples&lt;/strong&gt;&lt;/h1&gt;
&lt;p&gt;Mesmo quem começou a desenvolver em python faz pouco tempo (me incluo nessa categoria), tem familiariade com algumas estruturas de dados que são muito presentes na linguagem, como as listas, os dicionários, os sets e as tuples. Diria que conhecendo bem essas estruturas, é possível resolver uma grande variedade de problemas, onde cada estrutura tem suas peculiaridades. Uma comparação muito comum é entre listas e tuples, onde a principal diferença é que as listas são mutáveis, ou seja permitem modificações após sua criação, e as tuples são imutáveis, ou seja não permitem modificações após sua criação. Com relação as similaridades, listas e tuples aceitam elementos de tipos diferentes em uma mesma instância, tem os elementos acessados via índice e são usadas para agrupar informação.
Passei algum tempo utilizando essas estruturas e elas sempre funcionaram muito bem para mim. Porém há alguns meses, fazendo alguns desafios de código pela plataforma &lt;a href="https://pybit.es/"&gt;pybites&lt;/a&gt; me deparei com algumas novas estruturas presentes no módulo &lt;strong&gt;collections&lt;/strong&gt;, que são basicamente subclasses das estruturas básicas com algumas funcionalidades especificas adicionadas. Dentre elas, tem uma em especial que passei a utilizar em praticamente todos os meus códigos e é sobre ela que vou falar um pouco mais hoje. São as &lt;strong&gt;namedtuples&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Neste artigo vamos ver:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;O que são namedtuples.&lt;/li&gt;
&lt;li&gt;Como criar uma namedtuple.  &lt;/li&gt;
&lt;li&gt;Como acessar elementos de uma namedtuple.  &lt;/li&gt;
&lt;li&gt;Como converter uma namedtuple em um dicionário (e vice-versa).&lt;/li&gt;
&lt;li&gt;Como utilizar namedtuples para criar classes derivadas.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;&lt;strong&gt;O que são namedtuples?&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Namedtuple é uma subclasse da classe tuple com a diferença básica de terem campos nomeados. Ou seja, além de podermos acessar os elementos através do índice e iterando entre eles, podemos acessá-los na forma de atributos nomeados o que torna o código muito mais limpo e legível. Vamos ver agora como criar e desenvolver com essa estrutura.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Criando uma namedtuple&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Para criar uma namedtuple primeiramente precisamos importa-la do módulo collections.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;collections&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;namedtuple&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Com a possibilidade de criar namedtuples podemos agora análisar as principais diferenças entre elas e as tuples, para isso vou utilizar como exemplo o cadastro de um cliente de um banco. Para definir o cliente, preciso do &lt;strong&gt;nome completo&lt;/strong&gt;, &lt;strong&gt;agencia&lt;/strong&gt; e &lt;strong&gt;conta&lt;/strong&gt;. Como esses dados são imutáveis, é natural pensarmos em armazena-los em uma tuple. Como será feito a seguir:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;nome&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Rodrigo Bernardo Medeiros&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;agencia&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;8475&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;conta&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;09350-9&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;# CRIANDO UMA TUPLE&lt;/span&gt;
&lt;span class="c1"&gt;# 1° Forma de definção de tuples&lt;/span&gt;
&lt;span class="c1"&gt;# - Chamando a key word tuple e passando uma coleção, uma lista por exemplo.&lt;/span&gt;
&lt;span class="n"&gt;cliente&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;tuple&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;agencia&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;conta&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="c1"&gt;# 2° Forma de definição de tuples&lt;/span&gt;
&lt;span class="c1"&gt;# - Simplesmente passando os valores entre parentesis separados por vírgula.&lt;/span&gt;
&lt;span class="n"&gt;cliente&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;agencia&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;conta&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="c1"&gt;# CRIANDO UMA NAMEDTUPLE&lt;/span&gt;
&lt;span class="c1"&gt;# Definição de uma namedtuple&lt;/span&gt;
&lt;span class="c1"&gt;# 1° Criação de uma instância namedtuple&lt;/span&gt;
&lt;span class="n"&gt;Cliente&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;namedtuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Cliente&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nome&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;agencia&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;conta&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;cliente&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Cliente&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;nome&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;agencia&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;conta&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;O processo de criação de uma namedtuple difere da criação de uma tuple com um passo adicional, primeiro criamos uma namedtuple com as características específicas do problema a ser resolvido, no caso uma namedtuple chamada &lt;strong&gt;Cliente&lt;/strong&gt;, com os atributos &lt;strong&gt;nome&lt;/strong&gt;, &lt;strong&gt;agencia&lt;/strong&gt; e &lt;strong&gt;conta&lt;/strong&gt;. Em um segundo momento criamos uma instância da namedtuple Cliente onde de fato vamos definir cada um dos campos para cada cliente específico do banco. Com isso temos então um objeto imutável, derivado de uma tuple e com seus elementos sendo acessados através de atributos.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Acessando elementos de uma namedtuple&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;A principal vantagem de uma namedtuple é poder acessar os elementos através de campos nomeados, o que torna o código muito mais limpo e legível e neste caso podemos acessar os elementos também através de índices como mostrado a seguir:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="c1"&gt;# ACESSANDO ELEMENTOS VIA NOME DOS ATRIBUTOS&lt;/span&gt;
&lt;span class="n"&gt;cliente&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nome&lt;/span&gt; &lt;span class="c1"&gt;# &amp;gt; Retorna o nome Rodrigo Bernardo Medeiros&lt;/span&gt;
&lt;span class="n"&gt;cliente&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;agencia&lt;/span&gt; &lt;span class="c1"&gt;# &amp;gt; Retorna a agencia 8475&lt;/span&gt;
&lt;span class="n"&gt;cliente&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conta&lt;/span&gt; &lt;span class="c1"&gt;# &amp;gt; Retorna a conta 09350-9&lt;/span&gt;

&lt;span class="c1"&gt;# ACESSANDO ELEMENTOS VIA ÍNDICES&lt;/span&gt;
&lt;span class="n"&gt;cliente&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# &amp;gt; Retorna o nome Rodrigo Bernardo Medeiros&lt;/span&gt;
&lt;span class="n"&gt;cliente&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# &amp;gt; Retorna a agencia 8475&lt;/span&gt;
&lt;span class="n"&gt;cliente&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# &amp;gt; Retorna a conta 09350-9&lt;/span&gt;

&lt;span class="c1"&gt;# ITERANDO SOBRE ATRIBUTOS&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;att&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;cliente&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 

    &lt;span class="c1"&gt;# PRIMEIRO LOOP RETORNA O NOME&lt;/span&gt;
    &lt;span class="c1"&gt;# SEGUNDO LOOP RETORNA A AGENCIA&lt;/span&gt;
    &lt;span class="c1"&gt;# TERCEIRO LOOP RETORNA A CONTA   &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A estrutura das namedtuples são ideais para armazenar informação de modo organizado, tendo toda a estrutura de implementação das tuples com o fator adicional da nomeação dos campos. No exemplo acima, pensando no que está armazenado, ao fazer o acesso através dos índices, podemos pensar que cada índice seria um cliente, o que dificultaria o entendimento do código já que na verdade cada campo representa uma característica de um cliente.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Mais sobre namedtuples&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Converão namedtuple x dicionário.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Podemos facilmente converter as namedtuples em dicionários através do código a seguir.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;cliente&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_asdict&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;

&lt;span class="c1"&gt;# Retorna um dicionário onde cada campo nomeado se transforma em uma chave&lt;/span&gt;
&lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;nome&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Rodrigo Bernardo Medeiros&amp;#39;&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;agencia&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;8475&amp;#39;&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;conta&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;09350-9&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Conversão dicionário x namedtuple&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Assim como a conversão namedtuple em dicionário, podemos facilmente fazer o inverso.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;cliente_info&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;nome&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;Rodrigo Bernardo Medeiros&amp;#39;&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;agencia&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;8475&amp;#39;&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;conta&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;09350-9&amp;#39;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# Há o desempacotamento de informações associando os valores aos campos nomeados da namedtuple.&lt;/span&gt;
&lt;span class="n"&gt;cliente&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Cliente&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="n"&gt;cliente_info&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;cliente&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nome&lt;/span&gt; &lt;span class="c1"&gt;# &amp;gt; Retorna o nome Rodrigo Bernardo Medeiros&lt;/span&gt;
&lt;span class="n"&gt;cliente&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;agencia&lt;/span&gt; &lt;span class="c1"&gt;# &amp;gt; Retorna a agencia 8475&lt;/span&gt;
&lt;span class="n"&gt;cliente&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conta&lt;/span&gt; &lt;span class="c1"&gt;# &amp;gt; Retorna a conta 09350-9 &lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Obtendo o nome dos campos&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;É possível obter o nome dos campos definidos na criação da namedtuple, essa informação pode ser utilizada para criar novas named tuples por exemplo.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;cliente&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;_fields&lt;/span&gt;

&lt;span class="c1"&gt;# Retorna os campos listados em uma tuple. &lt;/span&gt;
&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nome&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;agencia&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;conta&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Criando classes derivadas de namedtuples&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Podemos criar classes que herdam os atributos de uma namedtuple, com isso podemos construir métodos em uma classe considerando os atrbutos nomeados na definição da namedtuple.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;code&gt;&lt;span class="n"&gt;Cliente&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;namedtuple&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;Cliente&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;nome&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;agencia&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;conta&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;

&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="nc"&gt;ClientInformationGenerator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Cliente&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

    &lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;mount_information&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;nome&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;agencia&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;conta&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Neste exemplo, a classe &lt;strong&gt;ClienteInformationGenerator&lt;/strong&gt; herda os atributos da namedtuple, com isso ao definir o método &lt;strong&gt;mount_information&lt;/strong&gt;, posso acessar a informação através dos nomes definidos previamente.&lt;/p&gt;
&lt;h2&gt;&lt;strong&gt;Conclusão&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Vimos neste artigo todo o necessário para entender e começar a utilizar as namedtuples, e já digo que é um caminho sem volta, ao começar utilizar vocês vão identificar cada vez mais pontos em seus códigos onde uma namedtuple pode encaixar bem (acreditem, aconteceu comigo). Vale a pena também explorar a &lt;a href="https://docs.python.org/3/library/collections.html#namedtuple-factory-function-for-tuples-with-named-fields"&gt;documentação&lt;/a&gt;, por lá vocês podem encontrar mais informação e exemplos das namedtuples e das outras estruturas de dados contidas no módulo collection. No mais, foi um prazer escrever mais um post principalmente sobre esta estrutura de dados que tenho utilizado muito.&lt;/p&gt;
&lt;p&gt;Obrigado pela leitura.&lt;/p&gt;
&lt;p&gt;Um grande abraço e até a próxima.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rodrigo B. Medeiros&lt;/strong&gt;&lt;/p&gt;</content><category term="Articles"></category></entry><entry><title>4 Regras do Projeto Simples</title><link href="/4-regras-do-projeto-simples.html" rel="alternate"></link><published>2021-03-21T22:00:00-03:00</published><updated>2021-03-21T22:00:00-03:00</updated><author><name>Rodrigo B. Medeiros</name></author><id>tag:None,2021-03-21:/4-regras-do-projeto-simples.html</id><summary type="html">&lt;p&gt;&lt;img alt="" src="images/cleanCode.jpg"&gt;&lt;/p&gt;
&lt;h1&gt;4 Regras do Projeto Simples&lt;/h1&gt;
&lt;p&gt;Logo no início da minha jornada de transição de carreira, comecei a ver muita coisa sobre desenvolvimento de software, incluindo cursos, livros, perfis em redes sociais, canais no youtube, entre outras diversas fontes. E é claro que sofri o que acredito que muitas pessoas sofram …&lt;/p&gt;</summary><content type="html">&lt;p&gt;&lt;img alt="" src="images/cleanCode.jpg"&gt;&lt;/p&gt;
&lt;h1&gt;4 Regras do Projeto Simples&lt;/h1&gt;
&lt;p&gt;Logo no início da minha jornada de transição de carreira, comecei a ver muita coisa sobre desenvolvimento de software, incluindo cursos, livros, perfis em redes sociais, canais no youtube, entre outras diversas fontes. E é claro que sofri o que acredito que muitas pessoas sofram, ter muito conteúdo disponível, porém sem saber como começar e pra onde ir.
Um dos livros que mais ouvi falar e que adquiri rapidamente foi o &lt;code&gt;Clean Code&lt;/code&gt; do dignissimo uncle Bob. Este é um dos livros que grande parte da comunidade cita como sendo uma referência, leitura obrigatória. Na época, comecei a lê-lo, mas, de fato, estava bem no início de tudo e não consegui entender grande parte de seu conteúdo.
Há poucos dias, peguei o livro novamente, quase um ano depois da leitura inicial, com um objetivo em mente: estudá-lo em detalhes, absorvendo o máximo possível dos ensinamentos e utilizando cada tópico o mais rápido possível em meu dia a dia. E como criei o blog pensando principalmente em compartilhar conhecimento, vou utilizar alguns posts para falar um pouco sobre o que foi aprendido ao longo dos capítulos do livro.
Hoje vou falar um pouco sobre o &lt;code&gt;capítulo 12 - Emergências&lt;/code&gt;, que apesar deste título, aborda principalmente a definição de 4 regras simples para o desenvolvimento de um bom projeto de software. De acordo com Kent Beck, as 4 regras são as seguintes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Efetuar todos os testes.&lt;/li&gt;
&lt;li&gt;Sem duplicação de código (DRY - Don't Repeat Yourself).&lt;/li&gt;
&lt;li&gt;Expressar o propósito do programador.&lt;/li&gt;
&lt;li&gt;Minimizar o número de classes e métodos.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Agora vamos entrar um pouco mais no detalhe de cada uma dessas regras.&lt;/p&gt;
&lt;h2&gt;1) Efetuar todos os testes.&lt;/h2&gt;
&lt;p&gt;Quanto mais me aprofundo no estudo de desenvolvimento de software, mais eu entendo (ou começo a entender) a necessidade da construção de testes, de maneira organizada e cobrindo o mais detalhadamente possível cada aspecto do código. A criação de um bom conjunto de testes direciona o desenvolvimento para a construção de um software melhor, com responsabilidades bem definidas em cada um de seus componentes. Pensando no aspecto de classes, por exemplo, teremos classes que, em sua maioria, serão pequenas e de propósito único. Um código com testes bem definidos, pode ser refatorado quando necessário, submetido aos testes novamente e se aprovado, temos a garantia que tudo está funcionando como deveria estar. Um software sem testes não serve de nada, pois não temos a garantia do que foi escrito realmente funciona na prática. Então, o aspecto mais importante desta regra é: teste, teste, teste e teste novamente.&lt;/p&gt;
&lt;h2&gt;2) Sem duplicação.&lt;/h2&gt;
&lt;p&gt;Essa parte é a parte que ouvimos falar a todo momento através do famoso acrônimo DRY ou Don't Repeat Yourself ou, em bom português, "Não Se Repita". É importante identificar trechos repetidos, exatamente pela repetição ser uma grande fonte de erros. Imagine um código com essa característica onde seja necessário alterar algo. Você precisaria mapear e fazer a alteração em todos os lugares de maneira correta para que tudo continue funcionando perfeitamente. Podemos ver que isso não é legal, e uncle Bob ainda se aprofunda mais, imagine que você não tenha estruturas repetidas exatamente iguais, mas similares de modo que sejam casos específicos de uma estrutura mais geral. Definindo essa estrutura mais geral como um método, por exemplo, podemos observar que uma classe deixa de respeitar o principio de responsabilidade única. Podemos, assim, extrair a responsabilidade adicional para uma nova classe, e mais ainda, essa nova classe pode ser reutilizada em outros pontos do código. Ou seja, além de eliminar uma fonte de problemas, melhoramos o nosso software. Isto á fantástico!&lt;/p&gt;
&lt;h2&gt;3) Expressividade.&lt;/h2&gt;
&lt;p&gt;Primeiro, uma pergunta: onde estão os maiores custos de um projeto de software? Acertou quem respondeu que é na manutenção de longo prazo. E por que isso ocorre? Bom, principalmente, devido a dificuldade em entender 100% tudo que um sistema faz, cada detalhe, cada classe ou método. O que torna extremamente difícil implementar melhorias, refatorar, escalar e até mesmo o principal, que é fazer o sistema continuar funcionando corretamente. Com isso, é muito importante arquitetar bem o software, se importar em nomear bem classes, métodos e variáveis. Ao desenvolver, devemos sempre pensar que em um futuro próximo, aquele ponto será revisitado por nós mesmos ou por outras pessoas, e é fundamental que tudo seja entendido rapidamente para que possamos investir o tempo onde realmente importa. Aqui novamente vemos a importância dos testes, quando bem escritos, os testes tem a capacidade de explicar o que o código faz e o que devemos esperar de cada trecho o que facilita bastante o trabalho em um sistema legado. Aproveitando para lembrar a regra número um, teste, teste e teste novamente.&lt;/p&gt;
&lt;h2&gt;4) Poucas classes ou métodos.&lt;/h2&gt;
&lt;p&gt;A última, mas não menos importante regra, é pensar em desenvolver poucas classes e métodos, mantendo-os enxutos, respeitando, principalmente, o princípio da responsabilidade única. Se conseguirmos desenvolver nosso sistema dentro deste princípio, escreveremos classes que só precisarão ser alteradas por um único motivo, conseguiremos escrever testes melhores que nos conduzirão a um desenvolvimento melhor, o que nos faz entrar em um círculo virtuoso de boas práticas. Claro que é importante ressaltar que, em alguns momentos, este princípio pode ser quebrado, mas a ideia é que mantenhamos em mente a importância desta regra e que, no caso desta ser quebrada, saibamos exatamente o motivo. Nas palavras de uncle Bob, "devemos pensar que nosso sistema como um todo deve ser pequeno. Logo, apesar de ser importante, devemos ser pragmáticos para não exagerar". Ou seja, além de pensar em cada classe e método, não devemos perder de vista a complexidade e tamanho da aplicação como um todo.&lt;/p&gt;
&lt;h2&gt;Conclusão.&lt;/h2&gt;
&lt;p&gt;Bom pessoal, estas foram as 4 regras do projeto simples, e ao analisar cada uma delas, conseguimos enxergar sua importância, principalmente, com relação a testes e o quanto eles são necessários e conduzem a um melhor desenvolvimento. Pensando no livro como um todo, é um capítulo pequeno, mas pesado nas informações e reflexões. Com certeza saio deste trecho um desenvolvedor melhor. Agradeço quem seguiu a leitura até aqui e em breve teremos mais resenhas sobre os demais capítulos. E, de fato, assim como falaram para mim, sugiro fortemente a leitura deste livro. Não só a leitura, mas a reflexão e o principal, a aplicação das ideias no dia a dia.&lt;/p&gt;
&lt;p&gt;Um grande abraço e até o próximo post.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Rodrigo B. Medeiros&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Para quem tiver interesse segue o link do livro: 
&lt;a href="https://www.amazon.com.br/C%C3%B3digo-limpo-Robert-C-Martin/dp/8576082675/ref=sr_1_1?__mk_pt_BR=%C3%85M%C3%85%C5%BD%C3%95%C3%91&amp;amp;dchild=1&amp;amp;keywords=clean+code&amp;amp;qid=1616373729&amp;amp;sr=8-1"&gt;Clean Code&lt;/a&gt;&lt;/p&gt;</content><category term="Articles"></category></entry></feed>